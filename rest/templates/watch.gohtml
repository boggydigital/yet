{{define "watch"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset='UTF-8'>
        <link rel='icon'
              href='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ”»</text></svg>'
              type='image/svg+xml'/>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <meta name='color-scheme' content='dark light'>
        <title>ðŸ”» {{.VideoTitle}}</title>
        {{template "css-shared"}}
        <style id="css-watch">
            video {
                width: 100%;
                height: 100%;
                aspect-ratio: 16/9
            }

            h1 {
                margin-block: var(--large)
            }

            h2 {
                display: inline
            }

            .videoDescription {
                margin-block-end: var(--large)
            }
        </style>
    </head>
    <body>

    <video controls='controls' preload='metadata' poster='{{.VideoPoster}}'>
        <source src='{{.VideoUrl}}'/>
    </video>

    <div class='subtle'>This video will play from the {{if eq .Server "local"}}yet{{else}}origin{{end}} server</div>
    <h1 class='videoTitle'>{{.VideoTitle}}</h1>

    {{if .VideoDescription}}
        <details>
            <summary><h2>Description</h2></summary>
            <div class='videoDescription'>{{.VideoDescription}}</div>
        </details>
    {{end}}

    <script>
        let video = document.getElementsByTagName('video')[0];
    </script>


    {{if .CurrentTime}}
        {{if .LastEndedTime}}
        {{else}}
            <script>video.currentTime = {{.CurrentTime}};</script>
        {{end}}

    {{end}}

    <script>
        let lastProgressUpdate = new Date();
        video.addEventListener('timeupdate', (e) => {
            let now = new Date();
            let elapsed = now - lastProgressUpdate;
            if (elapsed > 5000) {
                fetch('/progress', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        v: '{{.VideoId}}',
                        t: video.currentTime.toString(),
                        d: video.duration.toString()})
                }).then((resp) => { if (resp && !resp.ok) {
                    console.log(resp)}
                });
                lastProgressUpdate = now;
            }});
    </script>

    <script>
        video.addEventListener('ended', (e) => {
        fetch('/ended', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'},
                body: JSON.stringify({v: '{{.VideoId}}'})
            }).then((resp) => { if (resp && !resp.ok) {
                console.log(resp)}
            });});
    </script>

    <script>
        document.body.addEventListener('keydown', (e) => {
            switch (e.keyCode) {
        // ArrowRight
                case 39:
                e.preventDefault();
                video.currentTime += 15;
                break;
        // ArrowLeft
                case 37:
                e.preventDefault();
                video.currentTime -= 15;
                break;
        // Space
                case 32:
                e.preventDefault();
                video.paused ? video.play() : video.pause();
                break;
            };
            });
    </script>

    </body>
    </html>
{{end}}